name: "nextversion-action"
description: "Automatic semantic versioning action"
author: "Orkan Alat"
inputs:
  # tool-version:
  #   description: "Version of the nextversion tool to use"
  #   default: "latest"
  repo:
    description: "Path to git repository (default: '.')"
    default: "."
  default-current:
    description: "Default current version if none could be detected from tags (default: 'v0.0.0')"
    default: "v0.0.0"
  prestable-mode:
    description: "Disable major increments for versions prior to 1.0.0 (in-development phase) (default: 'false')"
    default: "false"
  
outputs:
  currentVersion:
    description: "Current version based on tags"
    value: "${{ steps.version.outputs.CURRENT }}"
  currentVersionStrict:
    description: "Current version based on tags, always without a prefix"
    value: "${{ steps.version.outputs.CURRENT_STRICT }}"
  hasCurrentVersion:
    description: "False if repo has no (usable) tags"
    value: "${{ steps.version.outputs.HAS_CURRENT }}"
  nextVersion:
    description: "Bumped next version"
    value: "${{ steps.version.outputs.NEXT }}"
  nextVersionStrict:
    description: "Bumped next version, always without a prefix"
    value: "${{ steps.version.outputs.NEXT_STRICT }}"
  hasNextVersion:
    description: "False if there were no applicable commit messages"
    value: "${{ steps.version.outputs.HAS_NEXT }}"
  prereleaseVersion:
    description: "Bumped prerelease version based on tags"
    value: "${{ steps.version.outputs.PRERELEASE }}"
  prereleaseVersionStrict:
    description: "Bumped prerelease version based on tags, always without a prefix"
    value: "${{ steps.version.outputs.PRERELEASE_STRICT }}"

runs:
  using: "composite"
  steps:
    - name: Setup binary
      shell: bash
      run: |
        set -eo pipefail

        # if [ "${{ inputs.tool-version }}" = "latest" ]; then
        #   download_url="$(curl -Ls https://api.github.com/repos/tsdtsdtsd/nextversion/releases/latest | jq -r .assets[0].browser_download_url)"
        # else
        #   download_url="https://github.com/tsdtsdtsd/nextversion/releases/download/${{ inputs.tool-version }}/nextversion_Linux_x86_64.tar.gz"
        # fi

        download_url="https://github.com/tsdtsdtsd/nextversion/releases/download/v0.1.2/nextversion_Linux_x86_64.tar.gz"
        echo $download_url

        curl -L "$download_url" > /tmp/nextversion.tar.gz
        tar -xzvf /tmp/nextversion.tar.gz -C /tmp
        mv /tmp/nextversion /usr/local/bin/nextversion
        chmod +x /usr/local/bin/nextversion

    - name: Call nextversion
      id: version
      shell: bash
      run: |
        set -eo pipefail

        NEXTVERSION_ARGS="-f json -d ${{ inputs.default-current }}"
        if [ "${{ inputs.prestable-mode }}" = "true" ]; then
          NEXTVERSION_ARGS="${NEXTVERSION_ARGS} -p"
        fi

        export versionJSON=$(nextversion $NEXTVERSION_ARGS)
        echo "currentVersion=$(echo $versionJSON | jq -r '."current"')" >> $GITHUB_OUTPUT
        echo "currentVersionStrict=$(echo $versionJSON | jq -r '."current-strict"')" >> $GITHUB_OUTPUT
        echo "hasCurrentVersion=$(echo $versionJSON | jq -r '."has-current"')" >> $GITHUB_OUTPUT
        echo "nextVersion=$(echo $versionJSON | jq -r '."next"')" >> $GITHUB_OUTPUT
        echo "nextVersionStrict=$(echo $versionJSON | jq -r '."next-strict"')" >> $GITHUB_OUTPUT
        echo "hasNextVersion=$(echo $versionJSON | jq -r '."has-next"')" >> $GITHUB_OUTPUT
        echo "prereleaseVersion=$(echo $versionJSON | jq -r '."prerelease"')" >> $GITHUB_OUTPUT
        echo "prereleaseVersionStrict=$(echo $versionJSON | jq -r '."prerelease-strict"')" >> $GITHUB_OUTPUT
        
        echo "Output from CLI:"
        echo "$(echo $versionJSON)"